@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # shootStrategy:ShootStrategy
    # shootNum:int
    # direction:int
    # power:int
    # startAngle:double
    + setShootNum(int shootNum): void
    + setStartAngle(double startAngle): void
    + setShootStrategy(ShootStrategy shootStrategy): void
    + getShootNum(): int
    + getDirection(): int
    + getPower(): int
    + getStartAngle(): double
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + shoot():List<BaseBullet>
 }

abstract class AbstractEnemyAircraft{
    # score: int
    # propNum: int
    # propFactory: PropFactory
    + getScore():int
    + AbstractEnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp, int score)
    + {abstract} generateNewProp():BaseProp
}

AbstractAircraft <|-- AbstractEnemyAircraft

class HeroAircraft {
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + increaseHp(int increase): void
    + increaseShootNum(int increase): void
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp,int score)
    + forward():void
    + shoot():List<BaseBullet>
    + generateNewProp():List<BaseProp>
}
AbstractEnemyAircraft <|-- MobEnemy
class EliteAircraft {
    + EliteAircraft(int locationX, int locationY, int speedX, int speedY, int hp,int score)
    + forward():void
    + generateNewProp():List<BaseProp>
    + shoot():List<BaseBullet>
}
AbstractEnemyAircraft <|-- EliteAircraft

class BossAircraft{
    + BossAircraft(int locationX, int locationY, int speedX, int speedY, int hp,int score)
    + generateNewProp():List<BaseProp>
    + shoot():List<BaseBullet>
}
AbstractEnemyAircraft <|-- BossAircraft

class ElitePlus{
    + ElitePlus(int locationX, int locationY, int speedX, int speedY, int hp,int score)
    + generateNewProp():List<BaseProp>
    + forward(): void
    + shoot():List<BaseBullet>
}
AbstractEnemyAircraft <|-- ElitePlus

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class BaseProp
{
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + BaseProp()
    + forward():void
}

class BloodProp {
    - blood:int
    + BloodProp(int locationX, int locationY,int speedX, int speedY)
    + addBlood(HeroAircraft heroAircraft): void
}
class BombProp {
    - power:int
    + BombProp(int locationX, int locationY,int speedX, int speedY)
    + bomb(List<AbstractEnemyAircraft> enemyAircrafts, ListIterator<BaseProp> iterator): int[]
}
class BulletProp {
    + BulletProp(int locationX, int locationY,int speedX, int speedY)
    + scatterShoot(HeroAircraft heroAircraft): void
}
class BulletPlusProp {
    + BulletPlusProp(int locationX, int locationY,int speedX, int speedY)
    + ringShot(HeroAircraft heroAircraft): void
}


BaseProp <|-- BloodProp
BaseProp <|-- BombProp
BaseProp <|-- BulletProp
BaseProp <|-- BulletPlusProp


AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

@enduml